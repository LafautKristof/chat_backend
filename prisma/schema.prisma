generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String?   @unique
  name          String?
  image         String?   
  password      String?   

  accounts      Account[]

  conversations ConversationParticipant[]
  messages      Message[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String   @id @default(uuid())
  provider          String   
  providerAccountId String   

  type              String?  // bv. "oauth"
  access_token      String?
  refresh_token     String?
  expires_at        Int?

  userId String
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  type      String   @default("text")

  sender   User? @relation(fields: [senderId], references: [id])
  senderId String?

  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  
  createdAt DateTime @default(now())
}

model Conversation {
  id            String   @id @default(uuid())
  title         String?
  background    String?
  isGroup       Boolean  @default(false)
  
  participants  ConversationParticipant[]
  messages      Message[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

}

model ConversationParticipant {
  id              String @id @default(uuid())
  user            User         @relation(fields: [userId], references: [id])
  userId          String
  
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String


  @@unique([userId, conversationId])
}
